#ifndef DZRALTE_COMM_H
#define DZRALTE_COMM_H

/** @file
 *  @brief Implmenets the serial protocol for a DZRALTE AMC amplifier
 *
 *  This driver uses one of the xMega's usart ports to communicate with a
 *  DZRALTE amplifier. To improve the speed preformance of the driver all
 *  commands are pre-generated by the dzralte_generate_command() function and
 *  stored by the user's code. The user can then send this command to the
 *  amplifier at a later time. This makes it so the driver does not have to
 *  regenerate a packet and compute the CRC bytes every time a packet is sent.
 *
 *  This driver only manages the packetization transmission and receiving of
 *  packets from the DZRALTE. The users still has to conifigure the uart driver
 *  with the correct baud rate for the amplifier and connect it to the
 *  interrupts.
 */

#include <stdbool.h>
#include "uart.h"

#define _DZRALTE_SOF 0xA5
#define _DZRALTE_EMPTY_RESPONCE 0x0
#define _DZRALTE_READ_RESPONCE 0x2

typedef enum {
	dzralte_read_cmd = 0x1,
	dzralte_write_cmd = 0x2
} dzralte_command_type_t;

/** @brief Struct to keep track of a message's buffers
 *
 *  Because we don't know when a message is going to be reutnred and what order
 *  they will be returned in, we need to store the information about a buffer
 *  until the response is returned. This struct is used to store the information
 *  about a particular message and it's response.
 */
typedef struct {
	uint8_t command_header[8];  /**< Buffer to store the command packet in */
	uint8_t response_header[8]; /**< Buffer to store the response packet */
	uint8_t *data_buffer;       /**< Buffer to store the data section of the packet in */
	uint16_t data_length;       /**< Length of the data section of the packet in bytes*/
	uint16_t data_CRC;          /**< CRC for data secion of last transmit */
	uint8_t sequence;           /**< Sequence number associated with this message */
	bool waiting_for_response;  /**< True when the message is waiting for a response */
} dzralte_message_t;

/** @brief Defines a type for storing the list of possible messages.
 *
 *  In order to link message responses to their message struct and buffers we
 *  keep track of them in an array. This typedef lets the user easily create
 *  this message list. A struct is used because you can't typedef an array and
 *  have it work as one would expect.
 */
typedef struct {dzralte_message_t message[17];} dzralte_message_list_t;

/** @brief Creates a message struct that can be sent at any time.
 *
 *  This function takes in all the required parameters for a message and returns
 *  a dzralte_message_t struct. The sequece is how the message response is
 *  identified when it is returned. Therefore the sequence should be a unique
 *  number. It has to be a maximum of 4 bits long. If this is a write command,
 *  then the data to be written is read from the data_buffer pointer when the
 *  message is sent. If a read command is generated, then the data returned from
 *  the amplifier will be written to data_buffer when the response is received.
 *
 *  Because the DZRALTE driver stores all messages internally in it's message
 *  lits, this funciton returns a pointer to the message. This pointer can be
 *  stored and later used to send the message. The message can also be
 *  referenced by it's sequence number.
 *
 *  @param message_list pointer to the user's message list
 *  @param address Six bit address of the amplifier to send the message to
 *  @param sequence Four bit sequence number used to keep track of the message
 *  @param command Command type, either read or write
 *  @param index Register index to either write or read
 *  @param offset Register offset from index to write or read
 *  @param data_buffer Pointer to where to read from or write message data to
 *  @param data_length Length of data section of message in bytes
 *  @return Pointer to the generated message in the internal message list
 */
dzralte_message_t* dzralte_generate_message(dzralte_message_list_t *message_list, uint8_t address, uint8_t sequence, dzralte_command_type_t command, uint8_t index, uint8_t offset, void *data_buffer, uint16_t data_length);

/** @brief Send a created message to the amplifier
 *
 *  This function sends a message created by dzralte_generate_command() to the
 *  DZRALTE amplifier. If a message pointer is provided then the message stored
 *  at that location is transmitted. If the message poitner is null, then the
 *  message with the provided sequence ID is tranmitted. If a message pointer is
 *  provided, then a sequence value is not required.
 *
 *  @param message_list pointer to the user's message list where the message is stored
 *  @param message Pointer to the message to be sent
 *  @param sequence Sequence of the message to send
 *  @param port uart port to transmit the message through
 *  @param regenerate_data_CRC Set true to regenerate the data section CRC, otherwise the previos CRC is used
 */
void dzralte_send_message(dzralte_message_list_t *message_list, dzralte_message_t *message, uint8_t sequence, uart_port_t *port, bool regenerate_data_CRC);

/** @brief Checks the uart input buffer for complete message responses
 *
 *  This function checks a uart's input buffer for complete dzralte messages. If
 *  there is a complete message in the input buffer, then it is read from the
 *  buffer and the data section is written into the data_buffer for the
 *  message's data_buffer. If there is only part of a message, then the message
 *  is left in the buffer
 *
 *  @param message_list pointer to the user's message list
 *  @param port pointer to the uart to use
 *  @return Number of messages processed
 */
uint8_t dzralte_check_responses(dzralte_message_list_t *message_list, uart_port_t *port);

/** @brief Checks if a message has received a response
 *
 *  This function checks if a response to a message has been reutrned. The
 *  message can either be referenced by a pointer or sequence number. If the
 *  message pointer is null, then the sequence number is used, otherwise the
 *  message pointer will be used.
 *
 *  @param message_list Pointer to the user's message list
 *  @param message Pointer to the message to check for responses
 *  @param sequence Sequence number of the message to check for responses
 *  @return true - A response has been received, if data was returned, it was put into the data buffer
 *  @return false - Response for this message was not received
 */
bool dzralte_response_received(dzralte_message_list_t *message_list, dzralte_message_t *message, uint8_t sequence);

#endif //DZRALTE_COMM_H
